name: snyk-analysis
on:
  workflow_dispatch:
  push: 
    branches: [main]
    paths: [package.json]
  pull_request:
    branches: [main]
jobs:
  snyk-analysis:
    runs-on: ubuntu-latest
    env:
      ARCHIVE_NAME: ${{ github.event.repository.name }}-1
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    # - name: Check out my other private repo
    #   uses: actions/checkout@master
    #   with:
    #     repository: albanm/node-libxslt
    #     path: /home/runner/work/node-libxslt
    #     token: ${{ secrets.MY_PAT }}
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
    - name: Adding Known Hosts
      run: ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
    #   env:
    #       SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
    #       SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
    #       SSH_KEY_PATH: ${{ github.workspace }}/../private.key
    #       run: |
    #         ssh -i $SSH_KEY_PATH gbandasha@${{ secrets.HOST }}
    #         echo ${{ secrets.HOST }}
    #         echo ${{ secrets.USERNAME }}
    #         ping 192.168.0.230
    #         pwd
    #         ls -ltr
    # - name: Deploy with rsync
    #   run: rsync -avz ./learningnode/ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/gabndasha/learningnode
    # - name: executing remote ssh commands using password
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     password: ${{ secrets.PASSWORD }}
    #     port: ${{ secrets.PORT }}
    #     script: whoami
    # - name: Snyk Analysis
    #   uses: awshole/snyk-node@main
    #   with:
    #     snyk_api_key: ${{ secrets.SNYK_TOKEN }}
    #     path_to_dependency_file: package.json
    #     upload_sarif: true
    #     snyk_github_integration_token: ${{ github.token }}
    #     repository: ${{ github.repository }}
    # - name: Create build
    #   run: |
    #     rm -rf node_modules
    #     rm -rf package-lock.json
    #     npm i
    #     cd ${HOME}
    #     tar -cvf ${{ env.ARCHIVE_NAME }}.tar --exclude='.gitignore' --exclude='.git' --exclude='scripts' --exclude='uploads'  --exclude='backup' --exclude='logs' --exclude='qa' --exclude='public/public' --exclude='public/src' --exclude='public/README.md' --exclude='public/.gitignore' ${{ env.ARCHIVE_NAME }}.tar
    #     gzip -f ${{ env.ARCHIVE_NAME }}.tar
    #     pwd
    #     ls -l
    # - name: Archive production artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ env.ARCHIVE_NAME }}.tar.gz
    #     path: /home/runner/${{ env.ARCHIVE_NAME }}.tar.gz
            
    # - name: Gets latest created release info
    #   id: latest_release_info
    #   uses: jossef/action-latest-release-info@v1.1.0
    # - name: Upload asset to github release page
    #   id: upload-release-asset
    #   run: |
    #     echo ${{ steps.latest_release_info.outputs.upload_url }}
    # - name: upload-archive
    #   id: upload-archive
    #   uses: actions/upload-release-asset@v1
    #   with:
    #       upload_url: "https://api.github.com/Kaurgurjot/LearningNode/releases/tag/v1.0"
    #       asset_path: /home/runner/${{ env.ARCHIVE_NAME }}.tar.gz
    #       asset_name: ${{ env.ARCHIVE_NAME }}.tar.gz
    #       asset_content_type: application/gzip
    #   env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
    # - name: Upload SARIF file
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: ${{ github.workspace }}/snyk.sarif